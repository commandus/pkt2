// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: iridium.proto

#ifndef PROTOBUF_iridium_2eproto__INCLUDED
#define PROTOBUF_iridium_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pkt2.pb.h"
// @@protoc_insertion_point(includes)
namespace iridium {
class GPS_Coordinates;
class GPS_CoordinatesDefaultTypeInternal;
extern GPS_CoordinatesDefaultTypeInternal _GPS_Coordinates_default_instance_;
class Packet8;
class Packet8DefaultTypeInternal;
extern Packet8DefaultTypeInternal _Packet8_default_instance_;
class Time5;
class Time5DefaultTypeInternal;
extern Time5DefaultTypeInternal _Time5_default_instance_;
}  // namespace iridium
namespace pkt2 {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
class Field;
class FieldDefaultTypeInternal;
extern FieldDefaultTypeInternal _Field_default_instance_;
class Output;
class OutputDefaultTypeInternal;
extern OutputDefaultTypeInternal _Output_default_instance_;
class Packet;
class PacketDefaultTypeInternal;
extern PacketDefaultTypeInternal _Packet_default_instance_;
class Sql;
class SqlDefaultTypeInternal;
extern SqlDefaultTypeInternal _Sql_default_instance_;
class Variable;
class VariableDefaultTypeInternal;
extern VariableDefaultTypeInternal _Variable_default_instance_;
}  // namespace pkt2

namespace iridium {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_iridium_2eproto();
void protobuf_InitDefaults_iridium_2eproto();

// ===================================================================

class GPS_Coordinates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:iridium.GPS_Coordinates) */ {
 public:
  GPS_Coordinates();
  virtual ~GPS_Coordinates();

  GPS_Coordinates(const GPS_Coordinates& from);

  inline GPS_Coordinates& operator=(const GPS_Coordinates& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPS_Coordinates& default_instance();

  static inline const GPS_Coordinates* internal_default_instance() {
    return reinterpret_cast<const GPS_Coordinates*>(
               &_GPS_Coordinates_default_instance_);
  }

  void Swap(GPS_Coordinates* other);

  // implements Message ----------------------------------------------

  inline GPS_Coordinates* New() const PROTOBUF_FINAL { return New(NULL); }

  GPS_Coordinates* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GPS_Coordinates& from);
  void MergeFrom(const GPS_Coordinates& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GPS_Coordinates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double latitude = 1 [(.pkt2.variable) = {
  void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  double latitude() const;
  void set_latitude(double value);

  // double longitude = 2 [(.pkt2.variable) = {
  void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  double longitude() const;
  void set_longitude(double value);

  // uint32 hdop = 3 [(.pkt2.variable) = {
  void clear_hdop();
  static const int kHdopFieldNumber = 3;
  ::google::protobuf::uint32 hdop() const;
  void set_hdop(::google::protobuf::uint32 value);

  // uint32 pdop = 4 [(.pkt2.variable) = {
  void clear_pdop();
  static const int kPdopFieldNumber = 4;
  ::google::protobuf::uint32 pdop() const;
  void set_pdop(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:iridium.GPS_Coordinates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double latitude_;
  double longitude_;
  ::google::protobuf::uint32 hdop_;
  ::google::protobuf::uint32 pdop_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_iridium_2eproto_impl();
  friend void  protobuf_AddDesc_iridium_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_iridium_2eproto();
  friend void protobuf_ShutdownFile_iridium_2eproto();

};
// -------------------------------------------------------------------

class Time5 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:iridium.Time5) */ {
 public:
  Time5();
  virtual ~Time5();

  Time5(const Time5& from);

  inline Time5& operator=(const Time5& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Time5& default_instance();

  static inline const Time5* internal_default_instance() {
    return reinterpret_cast<const Time5*>(
               &_Time5_default_instance_);
  }

  void Swap(Time5* other);

  // implements Message ----------------------------------------------

  inline Time5* New() const PROTOBUF_FINAL { return New(NULL); }

  Time5* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Time5& from);
  void MergeFrom(const Time5& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Time5* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 date_time = 1 [(.pkt2.variable) = {
  void clear_date_time();
  static const int kDateTimeFieldNumber = 1;
  ::google::protobuf::uint32 date_time() const;
  void set_date_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:iridium.Time5)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 date_time_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_iridium_2eproto_impl();
  friend void  protobuf_AddDesc_iridium_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_iridium_2eproto();
  friend void protobuf_ShutdownFile_iridium_2eproto();

};
// -------------------------------------------------------------------

class Packet8 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:iridium.Packet8) */ {
 public:
  Packet8();
  virtual ~Packet8();

  Packet8(const Packet8& from);

  inline Packet8& operator=(const Packet8& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Packet8& default_instance();

  static inline const Packet8* internal_default_instance() {
    return reinterpret_cast<const Packet8*>(
               &_Packet8_default_instance_);
  }

  void Swap(Packet8* other);

  // implements Message ----------------------------------------------

  inline Packet8* New() const PROTOBUF_FINAL { return New(NULL); }

  Packet8* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Packet8& from);
  void MergeFrom(const Packet8& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Packet8* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .iridium.GPS_Coordinates coordinates = 1 [(.pkt2.variable) = {
  bool has_coordinates() const;
  void clear_coordinates();
  static const int kCoordinatesFieldNumber = 1;
  const ::iridium::GPS_Coordinates& coordinates() const;
  ::iridium::GPS_Coordinates* mutable_coordinates();
  ::iridium::GPS_Coordinates* release_coordinates();
  void set_allocated_coordinates(::iridium::GPS_Coordinates* coordinates);

  // .iridium.Time5 measure_time = 2 [(.pkt2.variable) = {
  bool has_measure_time() const;
  void clear_measure_time();
  static const int kMeasureTimeFieldNumber = 2;
  const ::iridium::Time5& measure_time() const;
  ::iridium::Time5* mutable_measure_time();
  ::iridium::Time5* release_measure_time();
  void set_allocated_measure_time(::iridium::Time5* measure_time);

  // bool gpsolddata = 3 [(.pkt2.variable) = {
  void clear_gpsolddata();
  static const int kGpsolddataFieldNumber = 3;
  bool gpsolddata() const;
  void set_gpsolddata(bool value);

  // bool gpsencoded = 4 [(.pkt2.variable) = {
  void clear_gpsencoded();
  static const int kGpsencodedFieldNumber = 4;
  bool gpsencoded() const;
  void set_gpsencoded(bool value);

  // bool gpsfrommemory = 5 [(.pkt2.variable) = {
  void clear_gpsfrommemory();
  static const int kGpsfrommemoryFieldNumber = 5;
  bool gpsfrommemory() const;
  void set_gpsfrommemory(bool value);

  // bool gpsnoformat = 6 [(.pkt2.variable) = {
  void clear_gpsnoformat();
  static const int kGpsnoformatFieldNumber = 6;
  bool gpsnoformat() const;
  void set_gpsnoformat(bool value);

  // bool gpsnosats = 7 [(.pkt2.variable) = {
  void clear_gpsnosats();
  static const int kGpsnosatsFieldNumber = 7;
  bool gpsnosats() const;
  void set_gpsnosats(bool value);

  // bool gpsbadhdop = 8 [(.pkt2.variable) = {
  void clear_gpsbadhdop();
  static const int kGpsbadhdopFieldNumber = 8;
  bool gpsbadhdop() const;
  void set_gpsbadhdop(bool value);

  // bool gpstime = 9 [(.pkt2.variable) = {
  void clear_gpstime();
  static const int kGpstimeFieldNumber = 9;
  bool gpstime() const;
  void set_gpstime(bool value);

  // bool gpsnavdata = 10 [(.pkt2.variable) = {
  void clear_gpsnavdata();
  static const int kGpsnavdataFieldNumber = 10;
  bool gpsnavdata() const;
  void set_gpsnavdata(bool value);

  // bool satellite_visible_count = 11 [(.pkt2.variable) = {
  void clear_satellite_visible_count();
  static const int kSatelliteVisibleCountFieldNumber = 11;
  bool satellite_visible_count() const;
  void set_satellite_visible_count(bool value);

  // float battery_voltage = 12 [(.pkt2.variable) = {
  void clear_battery_voltage();
  static const int kBatteryVoltageFieldNumber = 12;
  float battery_voltage() const;
  void set_battery_voltage(float value);

  // bool battery_low = 13 [(.pkt2.variable) = {
  void clear_battery_low();
  static const int kBatteryLowFieldNumber = 13;
  bool battery_low() const;
  void set_battery_low(bool value);

  // bool battery_high = 14 [(.pkt2.variable) = {
  void clear_battery_high();
  static const int kBatteryHighFieldNumber = 14;
  bool battery_high() const;
  void set_battery_high(bool value);

  // int32 temperature = 15 [(.pkt2.variable) = {
  void clear_temperature();
  static const int kTemperatureFieldNumber = 15;
  ::google::protobuf::int32 temperature() const;
  void set_temperature(::google::protobuf::int32 value);

  // int32 reserved_2 = 16 [(.pkt2.variable) = {
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 16;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // bool failurepower = 17 [(.pkt2.variable) = {
  void clear_failurepower();
  static const int kFailurepowerFieldNumber = 17;
  bool failurepower() const;
  void set_failurepower(bool value);

  // bool failureeep = 18 [(.pkt2.variable) = {
  void clear_failureeep();
  static const int kFailureeepFieldNumber = 18;
  bool failureeep() const;
  void set_failureeep(bool value);

  // bool failureclock = 19 [(.pkt2.variable) = {
  void clear_failureclock();
  static const int kFailureclockFieldNumber = 19;
  bool failureclock() const;
  void set_failureclock(bool value);

  // bool failurecable = 20 [(.pkt2.variable) = {
  void clear_failurecable();
  static const int kFailurecableFieldNumber = 20;
  bool failurecable() const;
  void set_failurecable(bool value);

  // bool failureint0 = 21 [(.pkt2.variable) = {
  void clear_failureint0();
  static const int kFailureint0FieldNumber = 21;
  bool failureint0() const;
  void set_failureint0(bool value);

  // bool software_failure = 22 [(.pkt2.variable) = {
  void clear_software_failure();
  static const int kSoftwareFailureFieldNumber = 22;
  bool software_failure() const;
  void set_software_failure(bool value);

  // bool failurewatchdog = 23 [(.pkt2.variable) = {
  void clear_failurewatchdog();
  static const int kFailurewatchdogFieldNumber = 23;
  bool failurewatchdog() const;
  void set_failurewatchdog(bool value);

  // bool failurenoise = 24 [(.pkt2.variable) = {
  void clear_failurenoise();
  static const int kFailurenoiseFieldNumber = 24;
  bool failurenoise() const;
  void set_failurenoise(bool value);

  // bool failureworking = 25 [(.pkt2.variable) = {
  void clear_failureworking();
  static const int kFailureworkingFieldNumber = 25;
  bool failureworking() const;
  void set_failureworking(bool value);

  // uint32 key = 26 [(.pkt2.variable) = {
  void clear_key();
  static const int kKeyFieldNumber = 26;
  ::google::protobuf::uint32 key() const;
  void set_key(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:iridium.Packet8)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::iridium::GPS_Coordinates* coordinates_;
  ::iridium::Time5* measure_time_;
  bool gpsolddata_;
  bool gpsencoded_;
  bool gpsfrommemory_;
  bool gpsnoformat_;
  bool gpsnosats_;
  bool gpsbadhdop_;
  bool gpstime_;
  bool gpsnavdata_;
  float battery_voltage_;
  bool satellite_visible_count_;
  bool battery_low_;
  bool battery_high_;
  bool failurepower_;
  ::google::protobuf::int32 temperature_;
  ::google::protobuf::int32 reserved_2_;
  bool failureeep_;
  bool failureclock_;
  bool failurecable_;
  bool failureint0_;
  bool software_failure_;
  bool failurewatchdog_;
  bool failurenoise_;
  bool failureworking_;
  ::google::protobuf::uint32 key_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_iridium_2eproto_impl();
  friend void  protobuf_AddDesc_iridium_2eproto_impl();
  friend const ::google::protobuf::uint32* protobuf_Offsets_iridium_2eproto();
  friend void protobuf_ShutdownFile_iridium_2eproto();

};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GPS_Coordinates

// double latitude = 1 [(.pkt2.variable) = {
inline void GPS_Coordinates::clear_latitude() {
  latitude_ = 0;
}
inline double GPS_Coordinates::latitude() const {
  // @@protoc_insertion_point(field_get:iridium.GPS_Coordinates.latitude)
  return latitude_;
}
inline void GPS_Coordinates::set_latitude(double value) {
  
  latitude_ = value;
  // @@protoc_insertion_point(field_set:iridium.GPS_Coordinates.latitude)
}

// double longitude = 2 [(.pkt2.variable) = {
inline void GPS_Coordinates::clear_longitude() {
  longitude_ = 0;
}
inline double GPS_Coordinates::longitude() const {
  // @@protoc_insertion_point(field_get:iridium.GPS_Coordinates.longitude)
  return longitude_;
}
inline void GPS_Coordinates::set_longitude(double value) {
  
  longitude_ = value;
  // @@protoc_insertion_point(field_set:iridium.GPS_Coordinates.longitude)
}

// uint32 hdop = 3 [(.pkt2.variable) = {
inline void GPS_Coordinates::clear_hdop() {
  hdop_ = 0u;
}
inline ::google::protobuf::uint32 GPS_Coordinates::hdop() const {
  // @@protoc_insertion_point(field_get:iridium.GPS_Coordinates.hdop)
  return hdop_;
}
inline void GPS_Coordinates::set_hdop(::google::protobuf::uint32 value) {
  
  hdop_ = value;
  // @@protoc_insertion_point(field_set:iridium.GPS_Coordinates.hdop)
}

// uint32 pdop = 4 [(.pkt2.variable) = {
inline void GPS_Coordinates::clear_pdop() {
  pdop_ = 0u;
}
inline ::google::protobuf::uint32 GPS_Coordinates::pdop() const {
  // @@protoc_insertion_point(field_get:iridium.GPS_Coordinates.pdop)
  return pdop_;
}
inline void GPS_Coordinates::set_pdop(::google::protobuf::uint32 value) {
  
  pdop_ = value;
  // @@protoc_insertion_point(field_set:iridium.GPS_Coordinates.pdop)
}

// -------------------------------------------------------------------

// Time5

// uint32 date_time = 1 [(.pkt2.variable) = {
inline void Time5::clear_date_time() {
  date_time_ = 0u;
}
inline ::google::protobuf::uint32 Time5::date_time() const {
  // @@protoc_insertion_point(field_get:iridium.Time5.date_time)
  return date_time_;
}
inline void Time5::set_date_time(::google::protobuf::uint32 value) {
  
  date_time_ = value;
  // @@protoc_insertion_point(field_set:iridium.Time5.date_time)
}

// -------------------------------------------------------------------

// Packet8

// .iridium.GPS_Coordinates coordinates = 1 [(.pkt2.variable) = {
inline bool Packet8::has_coordinates() const {
  return this != internal_default_instance() && coordinates_ != NULL;
}
inline void Packet8::clear_coordinates() {
  if (GetArenaNoVirtual() == NULL && coordinates_ != NULL) delete coordinates_;
  coordinates_ = NULL;
}
inline const ::iridium::GPS_Coordinates& Packet8::coordinates() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.coordinates)
  return coordinates_ != NULL ? *coordinates_
                         : *::iridium::GPS_Coordinates::internal_default_instance();
}
inline ::iridium::GPS_Coordinates* Packet8::mutable_coordinates() {
  
  if (coordinates_ == NULL) {
    coordinates_ = new ::iridium::GPS_Coordinates;
  }
  // @@protoc_insertion_point(field_mutable:iridium.Packet8.coordinates)
  return coordinates_;
}
inline ::iridium::GPS_Coordinates* Packet8::release_coordinates() {
  // @@protoc_insertion_point(field_release:iridium.Packet8.coordinates)
  
  ::iridium::GPS_Coordinates* temp = coordinates_;
  coordinates_ = NULL;
  return temp;
}
inline void Packet8::set_allocated_coordinates(::iridium::GPS_Coordinates* coordinates) {
  delete coordinates_;
  coordinates_ = coordinates;
  if (coordinates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iridium.Packet8.coordinates)
}

// .iridium.Time5 measure_time = 2 [(.pkt2.variable) = {
inline bool Packet8::has_measure_time() const {
  return this != internal_default_instance() && measure_time_ != NULL;
}
inline void Packet8::clear_measure_time() {
  if (GetArenaNoVirtual() == NULL && measure_time_ != NULL) delete measure_time_;
  measure_time_ = NULL;
}
inline const ::iridium::Time5& Packet8::measure_time() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.measure_time)
  return measure_time_ != NULL ? *measure_time_
                         : *::iridium::Time5::internal_default_instance();
}
inline ::iridium::Time5* Packet8::mutable_measure_time() {
  
  if (measure_time_ == NULL) {
    measure_time_ = new ::iridium::Time5;
  }
  // @@protoc_insertion_point(field_mutable:iridium.Packet8.measure_time)
  return measure_time_;
}
inline ::iridium::Time5* Packet8::release_measure_time() {
  // @@protoc_insertion_point(field_release:iridium.Packet8.measure_time)
  
  ::iridium::Time5* temp = measure_time_;
  measure_time_ = NULL;
  return temp;
}
inline void Packet8::set_allocated_measure_time(::iridium::Time5* measure_time) {
  delete measure_time_;
  measure_time_ = measure_time;
  if (measure_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:iridium.Packet8.measure_time)
}

// bool gpsolddata = 3 [(.pkt2.variable) = {
inline void Packet8::clear_gpsolddata() {
  gpsolddata_ = false;
}
inline bool Packet8::gpsolddata() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.gpsolddata)
  return gpsolddata_;
}
inline void Packet8::set_gpsolddata(bool value) {
  
  gpsolddata_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.gpsolddata)
}

// bool gpsencoded = 4 [(.pkt2.variable) = {
inline void Packet8::clear_gpsencoded() {
  gpsencoded_ = false;
}
inline bool Packet8::gpsencoded() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.gpsencoded)
  return gpsencoded_;
}
inline void Packet8::set_gpsencoded(bool value) {
  
  gpsencoded_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.gpsencoded)
}

// bool gpsfrommemory = 5 [(.pkt2.variable) = {
inline void Packet8::clear_gpsfrommemory() {
  gpsfrommemory_ = false;
}
inline bool Packet8::gpsfrommemory() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.gpsfrommemory)
  return gpsfrommemory_;
}
inline void Packet8::set_gpsfrommemory(bool value) {
  
  gpsfrommemory_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.gpsfrommemory)
}

// bool gpsnoformat = 6 [(.pkt2.variable) = {
inline void Packet8::clear_gpsnoformat() {
  gpsnoformat_ = false;
}
inline bool Packet8::gpsnoformat() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.gpsnoformat)
  return gpsnoformat_;
}
inline void Packet8::set_gpsnoformat(bool value) {
  
  gpsnoformat_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.gpsnoformat)
}

// bool gpsnosats = 7 [(.pkt2.variable) = {
inline void Packet8::clear_gpsnosats() {
  gpsnosats_ = false;
}
inline bool Packet8::gpsnosats() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.gpsnosats)
  return gpsnosats_;
}
inline void Packet8::set_gpsnosats(bool value) {
  
  gpsnosats_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.gpsnosats)
}

// bool gpsbadhdop = 8 [(.pkt2.variable) = {
inline void Packet8::clear_gpsbadhdop() {
  gpsbadhdop_ = false;
}
inline bool Packet8::gpsbadhdop() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.gpsbadhdop)
  return gpsbadhdop_;
}
inline void Packet8::set_gpsbadhdop(bool value) {
  
  gpsbadhdop_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.gpsbadhdop)
}

// bool gpstime = 9 [(.pkt2.variable) = {
inline void Packet8::clear_gpstime() {
  gpstime_ = false;
}
inline bool Packet8::gpstime() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.gpstime)
  return gpstime_;
}
inline void Packet8::set_gpstime(bool value) {
  
  gpstime_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.gpstime)
}

// bool gpsnavdata = 10 [(.pkt2.variable) = {
inline void Packet8::clear_gpsnavdata() {
  gpsnavdata_ = false;
}
inline bool Packet8::gpsnavdata() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.gpsnavdata)
  return gpsnavdata_;
}
inline void Packet8::set_gpsnavdata(bool value) {
  
  gpsnavdata_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.gpsnavdata)
}

// bool satellite_visible_count = 11 [(.pkt2.variable) = {
inline void Packet8::clear_satellite_visible_count() {
  satellite_visible_count_ = false;
}
inline bool Packet8::satellite_visible_count() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.satellite_visible_count)
  return satellite_visible_count_;
}
inline void Packet8::set_satellite_visible_count(bool value) {
  
  satellite_visible_count_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.satellite_visible_count)
}

// float battery_voltage = 12 [(.pkt2.variable) = {
inline void Packet8::clear_battery_voltage() {
  battery_voltage_ = 0;
}
inline float Packet8::battery_voltage() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.battery_voltage)
  return battery_voltage_;
}
inline void Packet8::set_battery_voltage(float value) {
  
  battery_voltage_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.battery_voltage)
}

// bool battery_low = 13 [(.pkt2.variable) = {
inline void Packet8::clear_battery_low() {
  battery_low_ = false;
}
inline bool Packet8::battery_low() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.battery_low)
  return battery_low_;
}
inline void Packet8::set_battery_low(bool value) {
  
  battery_low_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.battery_low)
}

// bool battery_high = 14 [(.pkt2.variable) = {
inline void Packet8::clear_battery_high() {
  battery_high_ = false;
}
inline bool Packet8::battery_high() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.battery_high)
  return battery_high_;
}
inline void Packet8::set_battery_high(bool value) {
  
  battery_high_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.battery_high)
}

// int32 temperature = 15 [(.pkt2.variable) = {
inline void Packet8::clear_temperature() {
  temperature_ = 0;
}
inline ::google::protobuf::int32 Packet8::temperature() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.temperature)
  return temperature_;
}
inline void Packet8::set_temperature(::google::protobuf::int32 value) {
  
  temperature_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.temperature)
}

// int32 reserved_2 = 16 [(.pkt2.variable) = {
inline void Packet8::clear_reserved_2() {
  reserved_2_ = 0;
}
inline ::google::protobuf::int32 Packet8::reserved_2() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.reserved_2)
  return reserved_2_;
}
inline void Packet8::set_reserved_2(::google::protobuf::int32 value) {
  
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.reserved_2)
}

// bool failurepower = 17 [(.pkt2.variable) = {
inline void Packet8::clear_failurepower() {
  failurepower_ = false;
}
inline bool Packet8::failurepower() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.failurepower)
  return failurepower_;
}
inline void Packet8::set_failurepower(bool value) {
  
  failurepower_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.failurepower)
}

// bool failureeep = 18 [(.pkt2.variable) = {
inline void Packet8::clear_failureeep() {
  failureeep_ = false;
}
inline bool Packet8::failureeep() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.failureeep)
  return failureeep_;
}
inline void Packet8::set_failureeep(bool value) {
  
  failureeep_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.failureeep)
}

// bool failureclock = 19 [(.pkt2.variable) = {
inline void Packet8::clear_failureclock() {
  failureclock_ = false;
}
inline bool Packet8::failureclock() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.failureclock)
  return failureclock_;
}
inline void Packet8::set_failureclock(bool value) {
  
  failureclock_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.failureclock)
}

// bool failurecable = 20 [(.pkt2.variable) = {
inline void Packet8::clear_failurecable() {
  failurecable_ = false;
}
inline bool Packet8::failurecable() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.failurecable)
  return failurecable_;
}
inline void Packet8::set_failurecable(bool value) {
  
  failurecable_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.failurecable)
}

// bool failureint0 = 21 [(.pkt2.variable) = {
inline void Packet8::clear_failureint0() {
  failureint0_ = false;
}
inline bool Packet8::failureint0() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.failureint0)
  return failureint0_;
}
inline void Packet8::set_failureint0(bool value) {
  
  failureint0_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.failureint0)
}

// bool software_failure = 22 [(.pkt2.variable) = {
inline void Packet8::clear_software_failure() {
  software_failure_ = false;
}
inline bool Packet8::software_failure() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.software_failure)
  return software_failure_;
}
inline void Packet8::set_software_failure(bool value) {
  
  software_failure_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.software_failure)
}

// bool failurewatchdog = 23 [(.pkt2.variable) = {
inline void Packet8::clear_failurewatchdog() {
  failurewatchdog_ = false;
}
inline bool Packet8::failurewatchdog() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.failurewatchdog)
  return failurewatchdog_;
}
inline void Packet8::set_failurewatchdog(bool value) {
  
  failurewatchdog_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.failurewatchdog)
}

// bool failurenoise = 24 [(.pkt2.variable) = {
inline void Packet8::clear_failurenoise() {
  failurenoise_ = false;
}
inline bool Packet8::failurenoise() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.failurenoise)
  return failurenoise_;
}
inline void Packet8::set_failurenoise(bool value) {
  
  failurenoise_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.failurenoise)
}

// bool failureworking = 25 [(.pkt2.variable) = {
inline void Packet8::clear_failureworking() {
  failureworking_ = false;
}
inline bool Packet8::failureworking() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.failureworking)
  return failureworking_;
}
inline void Packet8::set_failureworking(bool value) {
  
  failureworking_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.failureworking)
}

// uint32 key = 26 [(.pkt2.variable) = {
inline void Packet8::clear_key() {
  key_ = 0u;
}
inline ::google::protobuf::uint32 Packet8::key() const {
  // @@protoc_insertion_point(field_get:iridium.Packet8.key)
  return key_;
}
inline void Packet8::set_key(::google::protobuf::uint32 value) {
  
  key_ = value;
  // @@protoc_insertion_point(field_set:iridium.Packet8.key)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace iridium

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_iridium_2eproto__INCLUDED
